{"version":3,"file":"js/app.66d36d17.js","mappings":"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","sources":["webpack://vue3/./src/App.vue","webpack://vue3/./src/components/Navbar.vue","webpack://vue3/./src/components/Navbar.vue?436b","webpack://vue3/./src/components/Notes.vue","webpack://vue3/./src/components/NotesItem.vue","webpack://vue3/./src/components/NotesItem.vue?86d4","webpack://vue3/./src/components/Notes.vue?c517","webpack://vue3/./src/components/Modal.vue","webpack://vue3/./src/components/Modal.vue?db1b","webpack://vue3/./src/App.vue?7ccd","webpack://vue3/./src/i18n/index.js","webpack://vue3/./src/main.js","webpack://vue3/webpack/bootstrap","webpack://vue3/webpack/runtime/chunk loaded","webpack://vue3/webpack/runtime/compat get default export","webpack://vue3/webpack/runtime/define property getters","webpack://vue3/webpack/runtime/global","webpack://vue3/webpack/runtime/hasOwnProperty shorthand","webpack://vue3/webpack/runtime/publicPath","webpack://vue3/webpack/runtime/jsonp chunk loading","webpack://vue3/webpack/startup"],"sourcesContent":["<!-- Первый урок по Todo-List -->\r\n<!-- Шаг № 1 В папке assets создать папки под шрифты/картинки/стили  -->\r\n<!-- Шаг № 2 Любые файлы которые мы добавляем нужно подключить в main.js (через import '@aseets/styles/style.scss') -->\r\n<!-- Шаг № 3 создать sccs(sass) (Обьяснить что это такое, преимущества)  -->\r\n<!-- Шаг № 4 Чтобы скачать npm i sass sass-loader \r\n  (Чтобы sccs работал без ошибок нужно скачать спец инструмент чтобы наш проект понимал что мы пишем)  -->\r\n<!-- Шаг № 5 скинуть макет(Стандартные действия начала вёрстки, скачать картинки/шрифты)  -->\r\n<!-- Шаг № 6 Создание переменных и подключение шрифтов через цикл в scss \r\n  (По стантарду подключить fonts к main)  -->\r\n<!-- Шаг № 7 подготовка scss стандартные стили, создание переменных, контейнер -->  \r\n\r\n<!-- Второй урок по Todo-List -->\r\n\r\n<!-- Шаг № 8 Разделение на комопненты (в данный момент Navbar) и его создание в components\r\n     также импорт и регистарция его в App.vue\r\n-->  \r\n<!-- Шаг № 9 Добавление вёрстки в Navbar.vue -->  \r\n<!-- Шаг № 10 Стилизация вёрстки компонента Navbar.vue -->  \r\n<!-- Шаг № 11 Создание 2 компонента, Для заметок после навигации (Notes.vue)\r\n   подключение его к App.vue(импорт/регистация/использование) -->  \r\n<!-- Шаг № 12 Создание 2 компонента, Для заметок после навигации (Notes.vue) --> \r\n<!-- Шаг № 13 Вёрстка компонента Notes.vue --> \r\n<!-- Шаг № 14 Стилизация компонента Notes.vue --> \r\n<!-- Шаг № 15 Сделать кнопку список кликабельной в файле (Notes.vue) --> \r\n<!-- Шаг № 16 Создать массив notes в App.vue \r\n  (Для добавление будущих заметок, \r\n  сначала будет записываться в массив, в виде обьекта и с этого обьекта отображаться на сайте) --> \r\n\r\n  <!-- Третий урок по Todo-List -->\r\n\r\n  <!-- Шаг № 17 Создание/import/регистрация NotesItem.vue в Notes.vue  -->\r\n  <!-- Шаг № 18 Вёрстка NotemItem.vue (Сама заметка)  -->\r\n  <!-- Шаг № 19 Стилизация вёрстки NotemItem.vue   -->\r\n  <!-- Шаг № 20 Через props передать массив notes в файл Notes.vue\r\n  (Заметки будут переданы через пропс в файл Notes.vue, Там мы с помощью цикла выведим их все на страницу, чтобы не писать 3 раза, да и потом каждый раз под новую заметку)\r\n  -->\r\n  <!-- Шаг № 21 Получить массив notes в файле Notes.vue  -->\r\n  <!-- Шаг № 22 Скачать расширение Vue devtools chrome и показать как пользоваться\r\n  (Также показать расширение wappalyzer)\r\n  -->\r\n  <!-- Шаг № 23 Вывести все заметки с помошью цикла в Файле Notes.vue -->\r\n  <!-- Шаг № 24 Через props Передать note(Каждый обьект в массиве notes в App.vue) в файл NotesItem.vue и принять его в этом файле-->\r\n  <!-- Шаг № 25 Вывести через {{}} Данные с обьект note (Который мы получили через props с файла Notes.vue) Вложить в Заголовок / Дату  -->\r\n  <!-- Шаг № 26 Создать Динамический класс в Notes.vue элементу notes__list -->\r\n  <!-- Шаг № 27 С помощью props передать значение view из Notes.vue в NotesItem.vue -->\r\n  <!-- Шаг № 28 Добавить Динамический класс в файле NotesItem.vue элементу notes__item_top и добавляем ему стили в scss-->\r\n\r\n   <!-- Четвертый урок по Todo-List -->\r\n\r\n   <!-- Шаг № 29 Создать компонент Modal.vue и подключить в App.vue -->\r\n   <!-- Шаг № 30 Вёрстка и стилизация Modal.vue -->\r\n   <!-- Шаг № 31 Задача, чтобы по умолчанию небыло Модалки, а при клике на кнопку добавление заметки открывалась\r\n              31.1 Создать ключ isModalOpen и создать условие v-show -->\r\n   <!-- Шаг № 32 в App.vue Добавить кнопку для добавление заметок и простилизовать её -->\r\n   <!-- Шаг № 33 При клике на пустое место(По .modal) закрытие окна в файле Modal.vue\r\n  33.1 Добавить условие в button в app.vue\r\n  33.2 Создать closeModal в Modal.vue\r\n  -->\r\n   <!-- Шаг № 34 Через функцию $emit передаём метод closeModal из Modal.vue в App.vue \r\n    34.1 Меняем isModalOpen на false при клике\r\n  -->\r\n   <!-- Шаг № 35 Чтобы событие closeModal не страбатывало на Блок с добавлением заметок нужно именно у блока сбрасывать это событие @click.stop\r\n    35.1 При клике на отмена, чтобы тоже срабатывал closeModal\r\n  --> \r\n   <!-- Шаг № 36 Сделать v-model Title и text с input и textArea --> \r\n\r\n    <!-- Пятый урок по Todo-List -->\r\n\r\n    <!-- Шаг № 37 Придать плавности при нажатии на \"Добавить заметку\r\n      Во вью есть встроенные компоненты, один из них transition \r\n      (Создать компонент transition в Modal.vue)\r\n      \" -->   \r\n    <!-- Шаг № 38 Взять с сайта свойства для Transition и поменять первое значение на то, которое мы написали в названий к нашей анимации в main.scss -->\r\n    <!-- Шаг № 39 Реализация добавления заметок (Добавить click в modal__block_btns(Modal.vue) и при клике вызывать метод addNote) -->\r\n    <!-- Шаг № 40 Создать и описать метод addNote в Modal.vue\r\n        (Который создаёт заметки)\r\n    -->\r\n     <!-- Шаг № 41 С помощью функции emit создать событие addNote и передать туда обьект note  -->\r\n     <!-- Шаг № 42 В App.vue Создать метод addNote и описать его   -->\r\n     <!-- Шаг № 43 Сделать так чтобы после того как добавиться заметка очищались поля ввода и закрывалась модальное окно (В Modal.vue После this.$emit вызвать closeModal())  -->\r\n     <!-- Шаг № 44 Добавить условие в метод addNote в файле Modal.vue -->\r\n     <!-- Шаг № 45 Удалить все обьекты в массиве notes (App.vue) -->\r\n     <!-- Шаг № 46 Скачать с npmjs.com uuid\r\n       (Сервис или по другому Созданная функция кем то для генерации уникального ID)\r\n      npm i uuid - Чтобы скачать сервис в проект\r\n      -->\r\n      <!-- Шаг № 47 после установки импортируем uuid в Modal.vue\r\n        С помощью сайта npmjs.com находим uuid там будет импорт\r\n        (Далее в addNote создаём ключ id:uuid4() )\r\n      -->\r\n      <!-- Все последующие шаги делаются в App.vue -->\r\n      <!-- Шаг № 48 Нужно сделать так чтобы при перезагрузке информация на странице сохранялась (localStorage)\r\n      Показать сначала пример (создать input, сделать v-model с word. Создать watch и обьяснить зачем он нужен)\r\n      -->\r\n      <!-- Шаг № 49 Отслеживать изменения в массиве(Notes заметки) с помощью Watch -->\r\n      <!-- Шаг № 50 Показать в браузере LocaleStorage и обьяснить что это такое \r\n           Это можно сказать локальное хранилище данных с сайта \r\n           (После перезагрузки или же закрытия браузера данных сохраняются)\r\n           Для чего используется (Чтобы сохранялся выбор языка пользователем на сайте. Выбор темы сайта)\r\n           LocalStorage - Это встроенный обьект в JavaScript\r\n           Мы в этот обьект в добавляем ключ и значение (Значение какое бы оно небыло может хранится только ввиде строки)\r\n      -->\r\n      <!-- Шаг № 51 Запись в localStorage наших заметок:\r\n         1) Добавляем в localeStorage ключ notes\r\n         2) Преобразование массива в строку с помощью JSON.stringify  -->\r\n<!--   Шаг № 52 Отображение данных из localStorage на страницу:\r\n         1) создать метод getNotes()\r\n         2) Создать переменную положить туда то, что хранится в localStorage\r\n         3) Данные наши сейчас являются строкой, нам нужно преобразовать их обратно в обычный тип данных (массив, обьект, строка и т.д) -->\r\n         <!-- Шаг № 53 Создание хук mounted (В нём вызвать getNotes())  -->\r\n         <!-- Шаг № 54 Реализация кнопки \"Удалить\" (NotesItem.vue) \r\n        1) Передать событие и уникальный id нашей заметки с NotesItem.vue в Notes.vue а из Notes передать в App.vue Всё это по средствам $emit()\r\n        -->\r\n        <!-- Шаг № 55 Создать метод delNote() который вызывается через emit с предыдушего шага -->\r\n\r\n\r\n  <!-- Шестой урок по Todo-List (Фукнционал для \"Редактировать\") -->\r\n\r\n\r\n  <!-- Шаг № 56 Добавить событие click в кнопку \"Редактировать\" в NotesItem.vue\r\n     дальше с помощью $emit передать событие и id той заметки на которую мы кликнем (note.id)  -->\r\n\r\n<!-- Все ниже шаги в App.vue -->\r\n  <!-- Шаг № 57 Создать метод change() в methods\r\n       Функционал заметки будет похожим на переключение с списка на сетку и наоборот\r\n  -->\r\n  <!-- Шаг № 58 Создать в data ключ edit: false -->\r\n  <!-- Шаг № 59 Передать через props :edit в Modal.vue сам edit.\r\n  Далее получить этот props в файле Modal.vue\r\n  -->\r\n  <!-- Шаг №60 Изменить Заголовок модального окна \"Изменить/Добавить заметку\" -->\r\n  \r\n  <!-- Шаг №61 Изменить кнопку  \"Изменить/Добавить\" в Modal.vue -->\r\n  <!-- Шаг №62 При клике на значёк \"Добавить заметку\".\r\n                   В кнопке \"Добавить/Изменить\" чтобы изначально  было \"добавить\". \r\n                   в App.vue в buttonе через запятую после isModalOpen edit менялся на false\r\n      -->\r\n  <!-- Шаг №63 Создать переменную CurrentNote в методе change() в файле App.vue -->\r\n  <!-- Шаг №64 Создать ключ editedNote в data().\r\n               Далее в методе Change() подключаемся к этому ключу и говорим что он будет равен той заметки на которую мы нажимаем \r\n    App.vue -->\r\n    <!-- Шаг №65 Через props передать в Modal.vue\r\n                 эту заметку(editedNote)\r\n    -->\r\n    <!-- Шаг №66 Сделать так чтобы при клике Изменить Сама заметка изменялась:\r\n      1) В Modal.vue тегу кнопке \"изменить\" при клике выполнялся метод changeNote\r\n      2)Создать метод changeNote()\r\n      3) Добавить условие в метод */\r\n      4)Создаём новый обьект в изменнённой заметкой (Но берём id той заметки которую мы передали через props editedNote.id. Чтобы Id не изменялся)\r\n      5) Передать изменённую заметку родителю через $emit() после вызываем closeModal()\r\n    -->\r\n    <!-- Шаг №67 \r\n      1)Принимаем из Modal.vue изменённую заметку по средствам $emit при событий @changeNote будет вызываться метод changeNote\r\n      2)Создаём метод changeNote\r\n      3)Принимаем изменённую заметку в параметре функции\r\n      4) С помощью forEach() перебираем наш основной массив с заметками и находим по id ту заметку которую мы изменяем и меняем в ней значения (title, text,date)\r\n     -->\r\n<!-- Шаг №68 Если заметки есть чтобы было \"Все заметки\"\r\n          Если заметок нет то чтобы было \"Нет заметок\":\r\n          1)В компоненте Notes.vue в notes__top-title через {{}} Создать условие \r\n-->\r\n\r\n  <!-- Седьмой урок по Todo-List (Поиск и Локализация) -->\r\n<!-- Шаг № 69 Создать ещё одну навигацию и настроить переключение с обычной на навигацию с поиском:\r\n     1)Создать ещё один nav в Navbar.vue и застилизовать его\r\n-->\r\n<!-- Шаг № 70 Сделать переключение Первого Nav на второй:\r\n     1) В файле Navbar.vue Создать ключ header: true\r\n     2) Прописать в обоих нав If/else\r\n     3) Повесить @click в обычный nav для переключение на поиск\r\n     4) Повесить @click в поисковой нав на переключение не обычный\r\n-->\r\n<!-- Шаг № 71 Реализация поиска:\r\n     1) Повесить v-model на инпут поиска и создать ключ search\r\n     2) При @click на крестик очищение поиска\r\n     3) Сделать так, чтобы при выходе из поиска v-model очищался\r\n-->\r\n<!-- Шаг № 72 Создать watch в Navbar.vue Чтобы отслеживал изменения. А Внутри него Метод search() - (так мы говорим за кем именно будет следить. Принимает 2 значения)\r\n-->\r\n<!-- Шаг № 73 В файле Navbar.vue передать через this.$emit() в App.vue новое значение которое мы получаем в newVal метода search\r\n-->\r\n<!-- Шаг № 74 Получаем этот эмит в App.vue и при вызове setSearch записываем в ключ searchValue(Который надо создать в App.vue в Data) то значение которое передаем через эмит с помощью $event\r\n-->\r\n<!-- Шаг № 74 В App.vue создаём computed и внутри метод filterNotes()\r\n-->\r\n<!-- Шаг № 75 filterNotes() нам будет возвращать результат тернарного оператора:\r\n       Если мы в поиск ничего не введём он возратит наш Notes\r\n       а если введём, то мы его переберём с помощью метода filter, все буквы сделаем маленькими и проверим есть ли то значение которые мы ввели в searchValue. Проверять будем с помощью метода includes и если то он нам вернёт именно те заметки в которых найдёт совпадение\r\n-->\r\n\r\n<!-- Локализация -->\r\n<!-- 1) Скачать npm i vuei18\r\n     2) Создать в src папку i18n\r\n     3) Создать 2 файла json ru.json и eng.json\r\n     4) положить в обои файла обьекты с одинаковыми названиями ключей см. файлы ru.json и eng.json\r\n     5) Создать в папке i18n файл index.js\r\n     6) Импортировать туда все файлы json из папки\r\n     7) Экспортируем  ru и eng\r\n     8) В Main.js импортируем обьект language из index.js\r\n     9) Импортируем createI18n из vue-i18n\r\n     10) Создать переменную localeStorageLang Где будем хранить значение lang из localStorage\r\n     11) Создать переменную i18n и в ней вызвать функцию createI18n и туда передать обьект\r\n     12) В обьекте 3 ключа нужно написать\r\n    legacy:true,\r\n    localeStorageLang и сделать чтобы он по умолчанию был на русском\r\n    message и передать туда наш обьект language\r\n    13)  Сказать нашему Vue чтобы он использовал его при созданий приложения\r\n    14) При клике на странице на кнопку RU будем запускать метод switchLang:\r\n    14.2) В файле Navbar.vue повесить событие @click в button с RU\r\n    15) Cоздать switchLang\r\n    16) В методе мы будем обращаться к this.$i18n.locale и будем проверять если там стоит русский будем менять на английский и если нет то будем оставлять русский\r\n    17) И в этом же методе мы будем записывать в localeStorage.lang наш язык\r\n    18) Менять кнопку RU на Eng\r\n    19) Чтобы менять язык в элементах на странице нам нужно через интерполяю использовать специальную функцию t() И передавать туда название нашего ключа, которые мы написали в файлах json\r\n-->\r\n\r\n\r\n<template>\r\n  <div class=\"wrapper\">\r\n\r\n    <!-- Шаг № 48 Пример -->\r\n    <input type=\"text\" v-model=\"word\">\r\n    <Navbar @setSearch=\"searchValue = $event\" />\r\n\r\n    <!--      Шаг № 54 Реализация кнопки \"Удалить\" (NotesItem.vue) вызвать delNote и при отработки этого события, вызывать метод delNote() -->\r\n    <Notes :notes=\"filterNotes\" @delNote=\"delNote\" @change=\"change\" />\r\n    <!-- Шаг № 56 Добавить событие click в кнопку\r\n               Запускаем событие change и вызываем метод change -->\r\n\r\n\r\n               <!-- 34.1 Меняем isModalOpen на false при клике -->\r\n    <!-- 31.1 Создать ключ isModalOpen и создать условие v-show -->\r\n    <Modal @close=\"isModalOpen = false\" v-show=\"isModalOpen\" @addNote=\"addNote\" :edit=\"edit\" :editedNote=\"editedNote\"\r\n      @changedNote=\"changedNote\" />\r\n    <!-- Шаг № 34 Через функцию $emit передаём метод closeModal из Modal.vue в App.vue -->\r\n    <!-- Шаг № 41 С помощью функции emit создать событие @addNote и передать туда обьект note  -->\r\n    <!-- Шаг № 59 Передать через props :edit в Modal.vue сам edit.\r\n                                        Далее получить этот props в файле Modal.vue\r\n                                        -->\r\n    <!-- Шаг №65 Через props передать в Modal.vue\r\n                                                   эту заметку(editedNote)\r\n                                      -->\r\n\r\n\r\n\r\n    <!-- Шаг № 32 в App.vue Добавить кнопку для добавление заметок и простилизовать её -->\r\n    <!-- 33.1 Добавить условие в button в app.vue -->\r\n    <button class=\"add__note\" @click=\"isModalOpen = true, edit = false\" v-if=\"!isModalOpen\">\r\n      <img src=\"@/assets/img/pens.svg\" alt=\"\">\r\n    </button>\r\n    <!-- Шаг №62 При клике на значёк \"Добавить заметку\".\r\n        В кнопке \"Добавить/Изменить\" чтобы изначально  было \"добавить\". \r\n        в App.vue в buttonе через запятую после isModalOpen edit менялся на false\r\n                                        -->\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n//  Шаг № 8 Разделение на комопненты (в данный момент nav) и его создание в components\r\n//  также импорт, регистарция и использование его в App.vue\r\n\r\nimport Navbar from \"@/components/Navbar.vue\";\r\nimport Notes from \"@/components/Notes.vue\";\r\nimport Modal from \"./components/Modal.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    Navbar,\r\n    Notes,\r\n    Modal\r\n  },\r\n\r\n  //  Шаг № 16 Создать массив notes в App.vue \r\n\r\n  // (Для добавление будущих заметок, \r\n  // сначала будет записываться в массив, в виде обьекта и с этого обьекта отображаться на сайте) \r\n  data() {\r\n    return {\r\n      //  Шаг № 31 Создать ключ isModalOpen и создать условие v-show\r\n      isModalOpen: false,\r\n      //  Шаг № 58 Создать в data ключ edit: false \r\n      edit: false,\r\n      searchValue: '',\r\n\r\n      /*   Шаг №64 Создать ключ editedNote в data()\r\n                  Далее в методе Change() подключаемся к этому ключу и говорим что он будет равен той заметки на которую мы нажимаем  (App.vue) */\r\n      editedNote: null,\r\n\r\n      /* При клике \"Добавить заметку\", заметка будет добавлять в этот массив.  */\r\n      notes: [\r\n        /*       Каждая заметка будет в виде обьекта где будет лежать (Название, дата создания, описание и ID) */\r\n        // { \r\n        //   id: 1,\r\n        //   title: \"Vue\",\r\n        //   text: \"Lorem, Lorem, Lorem, Lorem\",\r\n        //   date: \"07.03.2023\",\r\n        // },\r\n        // {\r\n        //   id: 1,\r\n        //   title: \"react\",\r\n        //   text: \"Lorem, Lorem, Lorem, Lorem\",\r\n        //   date: \"07.03.2023\",\r\n        // },\r\n        // {\r\n        //   id: 1,\r\n        //   title: \"Angular\",\r\n        //   text: \"Lorem, Lorem, Lorem, Lorem\",\r\n        //   date: \"07.03.2023\",\r\n        // },\r\n\r\n      ],\r\n\r\n      /* Шаг № 48 Пример \r\n   watch следит за данными которые находятся в data */\r\n      word: '',\r\n    };\r\n  },\r\n  methods: {\r\n    //  Шаг № 42 В App.vue Создать метод addNote и описать его\r\n    /* addNote Принимает note(это тот обьект который мы отправили) */\r\n    addNote(note) {\r\n      this.notes.push(note)\r\n    },\r\n    /*  Шаг № 55 Создать метод delNote() который вызывается через emit с предыдушего шага\r\n    в $emit() с событием delNote мы передавали Id той заметки на которую мы нажали.\r\n    Принимаем её в методе delNote\r\n    И удаляем одним из ниже способов\r\n    */\r\n    delNote(id) {\r\n      /* В index будет записана ключ/ячейка с данными */\r\n      // let index = this.notes.findIndex((note) => note.id == id)\r\n      // console.log(index);\r\n      // this.notes.splice(index, 1)  /* Через findIndex */\r\n      this.notes.splice(id, 1)  /* Обычный splice */\r\n    },\r\n\r\n    /*    Шаг № 52 Отображение данных из localStorage на страницу:\r\n     1) создать метод getNotes()\r\n     2) Создать переменную положить туда то, что хранится в localStorage\r\n     3) Данные наши сейчас являются строкой, нам нужно преобразовать их обратно в обычный тип данных (массив, обьект, строка и т.д)\r\n    */\r\n    getNotes() {\r\n      let localNotes = localStorage.notes\r\n      if (localNotes) {\r\n        /* Метод parse преобразует из строки в обычный тип данных */\r\n        /* В этот момент ещё пока сохранение не работает \r\n          нужно использовать хук mounted\r\n        */\r\n        this.notes = JSON.parse(localNotes)\r\n      }\r\n    },\r\n\r\n    /* Шаг № 57 Создать метод change() в methods */\r\n    change(id) {\r\n      // console.log(id); /* Id получаемой заметки */\r\n      this.isModalOpen = this.edit = true\r\n      /* Далее нужно в modal.vue передать ключ edit */\r\n\r\n      /*  Шаг №63 Создать переменную CurrentNote в методе change() в файле App.vue\r\n      Перебираем массив notes. Берём каждый обьект и у него конкретно добираемся до note.id и сравниваем с тем Id который приходит к нам из NotesItem.vue. (Та заметка на которую мы нажали)\r\n      */\r\n      let currentNote = this.notes.find(note => note.id == id)\r\n      console.log(currentNote);\r\n      /*   Шаг №64 Создать ключ editedNote в data()\r\n                Далее в методе Change() подключаемся к этому ключу и говорим что он будет равен той заметки на которую мы нажимаем  (App.vue) */\r\n      this.editedNote = currentNote\r\n    },\r\n\r\n    /*    Шаг №67 \r\n          1)Принимаем из Modal.vue изменённую заметку по средствам $emit при событий @changeNote будет вызываться метод changeNote\r\n          2)Создаём метод changeNote\r\n          3)Принимаем изменённую заметку в параметре функции\r\n          4) С помощью forEach() перебираем наш основной массив с заметками и находим по id ту заметку которую мы изменяем и меняем в ней значения (title, text,date)\r\n          */\r\n    changedNote(newNote) {\r\n      this.notes.forEach(note => {\r\n        if (note.id == newNote.id) {\r\n          note.title = newNote.title\r\n          note.text = newNote.text\r\n          note.date = newNote.date\r\n        }\r\n      })\r\n    }\r\n  },\r\n  /*    Шаг № 75 filterNotes() нам будет возвращать результат тернарного оператора:\r\n         Если мы в поиск ничего не введём он возратит наш Notes\r\n         а если введём, то мы его переберём с помощью метода filter, все буквы сделаем маленькими и проверим есть ли то значение которые мы ввели в searchValue. Проверять будем с помощью метода includes и если то он нам вернёт именно те заметки в которых найдёт совпадение */\r\n\r\n  computed: {\r\n    filterNotes() {\r\n      return this.searchValue ? this.notes.filter(note => note.title.toLowerCase().includes(this.searchValue.toLowerCase())) : this.notes;\r\n    }\r\n  },\r\n\r\n  /*  Шаг № 53 Создание хук mounted (В нём вызвать getNotes())   */\r\n  mounted() {\r\n    this.getNotes()\r\n    console.log(this.close);\r\n  },\r\n\r\n  /* Шаг № 48 Пример \r\n   watch следит за данными которые находятся в data */\r\n  //  watch:{\r\n  //   /* Внутри создаётся метод с названием данных за которыми нужно следить. Принимает в себя 2 аргумента */\r\n  //   word(newVal, oldVal){\r\n  //     /* Первый параметр возвращает новое значение\r\n  //        Второй параметр возвращает старое значение\r\n  //        Метод запуститься тогда когда пройзойдут какие либо изменения\r\n  //        Второй параметр в основном не используется только 1\r\n  //     */\r\n  //    console.log('Новое значение ' + newVal);\r\n\r\n  //    console.log('Старое значение ' + oldVal);\r\n  //   }\r\n  //  }\r\n\r\n  /*  Шаг № 49 Отслеживать изменения в массиве(Notes заметки) с помощью Watch.\r\n      Показать пример без глубокого отслеживания\r\n      Notes это массив, внутри него мы добавляем обьекты и нам надо следить именно за ними\r\n      для этого нам нужно сделать глубокое отслеживание 1) Ключ notes 2)Создать handler() 3)Создать ключ deep:true \r\n  */\r\n  watch: {\r\n    /* Пример  до глубокого отслеживания*/\r\n    // notes(){\r\n    //   console.log('Изменен');\r\n    /* Только отслеживает изменения */\r\n    // }\r\n    notes: {\r\n      /* Handler() - что то делает, изменяет и т.д */\r\n      handler() {\r\n        /*    Шаг № 51 Запись в localStorage наших заметок:\r\n             1) Добавляем в localeStorage ключ notes\r\n             2) Преобразование массива в строку с помощью JSON.stringify \r\n             JSON Специальный формат файлов - JavaScript Object notasion\r\n             Stringify - метод преобразующий данные в строку\r\n             Показать данные в браузере (application)\r\n             */\r\n        localStorage.notes = JSON.stringify(this.notes)\r\n        console.log('Изменен');\r\n        /* Глубокое отслеживание */\r\n      },\r\n      deep: true\r\n    }\r\n  }\r\n};\r\n</script>\r\n","<!-- Шаг № 9 Добавление вёрстки в Navbar.vue -->  \r\n\r\n<template>\r\n  <header class=\"header\">\r\n  <!-- Шаг № 70 Сделать переключение Первого Nav на второй:\r\n     1) В файле Navbar.vue Создать ключ header: true\r\n     2) Прописать в обоих нав If/else\r\n         3) Повесить @click в обычный nav для переключение на поиск\r\n         4) Повесить @click в поисковой нав на переключение не обычный -->\r\n    <nav class=\"nav\" v-if=\"nav\">\r\n\r\n      <!-- При клике на кнопку Будет вызываться метод switchLang -->\r\n      <button @click=\"switchLang\" class=\"nav__lang\">\r\n        {{ $i18n.locale }}</button>\r\n\r\n      <!-- Заменить все значение на значение выполнения встроеной функции в i18n $t() и передать в неё название ключа из Json файла -->\r\n      <h1 class=\"nav__title\">{{ $t('notes') }}</h1>\r\n      <button class=\"nav__search\" @click=\"nav = !nav\">\r\n        <img src=\"@/assets/img/search.svg\" alt=\"search\" />\r\n      </button>\r\n    </nav>\r\n\r\n  <!-- Шаг № 69 Создать ещё одну навигацию и настроить переключение с обычной на навигацию с поиском:\r\n      1)Создать ещё один nav в Navbar.vue и застилизовать его\r\n                  -->\r\n    <nav class=\"nav__search\" v-else>\r\n      <button class=\"nav__search_back\" @click=\"nav = true\">\r\n        <img src=\"@/assets/img/back.svg\" alt=\"\">\r\n    </button>\r\n    <!-- Шаг № 71 Реализация поиска:\r\n     1) Повесить v-model на инпут поиска и создать ключ search\r\n     2) При @click на крестик очищение поиска\r\n         3) Сделать так, чтобы при выходе из поиска v-model очищался\r\n      -->\r\n    <input v-model=\"search\" type=\"text\" class=\"nav__search_input\" autofocus :placeholder=\"$t('searchInput')\">\r\n    <!-- Шаг № 71 Реализация поиска:\r\n     1) Повесить v-model на инпут поиска и создать ключ search\r\n     2) При @click на крестик очищение поиска\r\n         3) Сделать так, чтобы при выходе из поиска v-model очищался\r\n      -->\r\n      <button class=\"nav__search_clear\" @click=\"search = ''\">\r\n        <img src=\"@/assets/img/close.svg\" alt=\"\">\r\n      </button>\r\n    </nav>\r\n  </header>\r\n</template>\r\n\r\n<!-- Шаг № 10 Стилизация вёрстки компонента Navbar.vue -->  \r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      /*   Шаг № 70 Сделать переключение Первого Nav на второй:\r\n           1) В файле Navbar.vue Создать ключ header: true\r\n           2) Прописать в обоих нав If/else \r\n           3) Повесить @click на кнопку в обычном Nav для переключение на поиск\r\n           4) Повесить @click на кнопку в поисковом Nav на переключение на обычный*/\r\n      nav: true,\r\n      /*   Шаг № 71 Реализация поиска:\r\n           1) Повесить v-model на инпут поиска и создать ключ search\r\n           2) При @click на крестик очищение поиска\r\n           3) Сделать так, чтобы при выходе из поиска v-model очищался */\r\n\r\n      search: '',\r\n    }\r\n  },\r\n  methods: {\r\n    /* Функция для переключения языка на сайте */\r\n    switchLang() {\r\n      /* Обращаемся к ключе locale в функции в которую мы передали обьект\r\n         И если там 'ru' то меняем его на английский. Ну а если английский то наоборот на русский */\r\n      this.$i18n.locale == 'ru' ? this.$i18n.locale = 'eng' : this.$i18n.locale = 'ru'\r\n      \r\n      /* Записываем в ключ lang в localStorage наш ключ locale из обьекта который передали в функцию i18n */\r\n      localStorage.lang = this.$i18n.locale\r\n    }\r\n  },\r\n  /*    Шаг № 72 Создать watch в Navbar.vue Чтобы отслеживал изменения. А Внутри него Метод search() - (так мы говорим за кем именно будет следить. Принимает 2 значения) */\r\n\r\n  watch: {\r\n    search(newValue) {\r\n      // console.log(newValue);\r\n\r\n      /*    Шаг № 73 передать через this.$emit() новое значение которое мы получаем в newVal метода search */\r\n      this.$emit('setSearch', newValue)\r\n    }\r\n  }\r\n};\r\n</script>\r\n","import { render } from \"./Navbar.vue?vue&type=template&id=14e7d052\"\nimport script from \"./Navbar.vue?vue&type=script&lang=js\"\nexport * from \"./Navbar.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue\\\\vueLesson5-11-1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\r\n<!-- Шаг № 13 Вёрстка компонента Notes.vue --> \r\n<template>\r\n  <div class=\"notes container\">\r\n\r\n    <!-- Верхняя часть с кнопкой и заголовком -->\r\n  <div class=\"notes__top\">\r\n    <!-- Шаг №68 Если заметки есть чтобы было \"Все заметки\"\r\n          Если заметок нет то чтобы было \"Нет заметок\":\r\n            1)В компоненте Notes.vue в notes__top-title через {{}} Создать условие \r\n  -->\r\n      <h2 class=\"notes__top_title\">{{ notes.length > 0 ? $t('allNotes') : $t('noNotes') }}</h2>\r\n      <!-- Сначала сверстать с 1 элементом без локиги -->\r\n\r\n      <!-- Шаг № 15 Сделать кнопку список кликабельной в файле (Notes.vue) -->\r\n\r\n      <button @click=\"view = !view\" class=\"notes__top_btn\">\r\n        <img v-show=\"view\" src=\"@/assets/img/list.svg\" alt=\"list\" />\r\n      <img v-show=\"!view\" src=\"@/assets/img/layout.svg\" alt=\"list\" />\r\n      <!-- v-if лучше использовать тогда, когда этим элементом не часто пользуются.\r\n                          v-show - лучше использовать когда им часто пользуются(v-show отрабатывает быстрее)\r\n                          -->\r\n        <!-- <span>Список</span> -->\r\n        <span>{{ view ? \"Список\" : \"Сетка\" }}</span>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Шаг № 14 Стилизация компонента Notes.vue -->\r\n\r\n    <!-- Шаг № 26 Создать Динамический класс в Notes.vue элементу notes__list -->\r\n    <!-- Если view будет равен true то добавиться active -->\r\n    <!-- Далее в &__list  .active -->\r\n    <div class=\"notes__list\" :class=\"{ active: !view }\">\r\n      <!-- Див для самих заметок -->\r\n\r\n      <!-- Шаг № 23 Вывести все заметки с помошью цикла в Файле Notes.vue -->\r\n      <NotesItem v-for=\"note in notes\" :key=\"note.id\" :note=\"note\" :view=\"view\" @delNote=\"$emit('delNote', note.id)\"\r\n        @change=\"$emit('change', note.id)\" />\r\n      <!-- Шаг № 24 Через props Передать note(Каждый обьект в массиве notes в App.vue) в файл NotesItem.vue и принять его в этом файле-->\r\n\r\n    <!-- Шаг № 27 С помощью props передать значение view из Notes.vue в NotesItem.vue -->\r\n    <!--      Шаг № 54 Реализация кнопки \"Удалить\" (NotesItem.vue) \r\n            1) Передать событие и уникальный id нашей заметки с NotesItem.vue в Notes.vue а из Notes передать в App.vue Всё это по средствам $emit().\r\n               вызвать событие delNote и передать дальше в App.vue также delNote и note.ID\r\n            -->\r\n    <!-- Шаг № 56 Добавить событие click в кнопку \"Редактировать\" в NotesItem.vue\r\n        \r\n           56.3 Здесь в Notes.vue передать с помощью $emit('change', note.id) в App.vue\r\n          -->\r\n\r\n    </div>\r\n\r\n  <!-- Шаг № 16 Создать массив notes в App.vue \r\n              (Для добавление будущих заметок, \r\n              сначала будет записываться в массив, в виде обьекта и с этого обьекта отображаться на сайте) -->\r\n\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport NotesItem from './NotesItem.vue';\r\n\r\n\r\n//  Шаг № 15 Сделать кнопку список кликабельной в файле (Notes.vue) \r\nexport default {\r\n  // Шаг № 21 Получить массив notes в файле Notes.vue \r\n  props: {\r\n    notes: {\r\n      typeof: Array\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      view: true,\r\n    };\r\n  },\r\n  components: { NotesItem }\r\n};\r\n</script>\r\n","  <!-- Шаг № 17 Создание/import/регистрация NotesItem.vue в Notes.vue  -->\r\n\r\n<template>\r\n    <!-- Одна заметка -->\r\n    <div class=\"notes__item\">\r\n        <!-- Шаг № 28 Добавить Динамический класс в файле NotesItem.vue элементу notes__item_top и добавляем ему стили в scss-->\r\n    <div class=\"notes__item_top\" :class=\"{ between: !view }\">\r\n            <!-- <h2 class=\"notes__item_top-title\">Title</h2>\r\n                                <p class=\"notes__item_top-date\">07.02.2022</p> -->\r\n\r\n            <!-- Шаг № 25 Вывести через {{}} Данные с обьект note (Который мы получили через props с файла Notes.vue) Вложить в Заголовок / Дату / текст  -->\r\n            <h2 class=\"notes__item_top-title\">{{ note.title }}</h2>\r\n            <p class=\"notes__item_top-date\">{{ note.date }}</p>\r\n        </div>\r\n        <!-- <p class=\"notes__item_text\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Illo, necessitatibus quis? Consequatur!</p> -->\r\n        <p class=\"notes__item_text\">{{ note.text }}</p>\r\n        <div class=\"notes__item_btns\">\r\n\r\n            <!-- Шаг № 56 Добавить событие click в кнопку \"Редактировать\" в NotesItem.vue\r\n                 дальше с помощью $emit передать событие и id той заметки на которую мы кликнем (note.id) в компонент Notes.vue  -->\r\n            <button class=\"notes__item_btns-btn edit\" @click=\"$emit('change', note.id)\">\r\n                <img src=\"@/assets/img/pens.svg\" alt=\"pens\">\r\n                <span>РЕДАКТИРОВАТЬ</span>\r\n        </button>\r\n        <!-- Шаг № 54 Реализация кнопки \"Удалить\" (NotesItem.vue) \r\n            1)Передать событие и уникальный id нашей заметки с NotesItem.vue в Notes.vue а из Notes передать в App.vue Всё это по средствам $emit().\r\n            emit Принимает 2 параметра: 1) Название события 2)данные(В нашем случае уникальное название note.ID)\r\n\r\n            -->\r\n            <button class=\"notes__item_btns-btn del\" @click=\"$emit('delNote', note.id)\">\r\n                <img src=\"@/assets/img/basket.svg\" alt=\"basket\">\r\n                <span>Удалить</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    //  Шаг № 24 Через props Передать note(Каждый обьект в массиве notes в App.vue) в файл NotesItem.vue и принять его в этом файле\r\n    props: {\r\n        note: {\r\n            typeof: Object\r\n        },\r\n        //    Шаг № 27 С помощью props передать значение view из Notes.vue в NotesItem.vue \r\n        view: {\r\n            typeof: Boolean\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n","import { render } from \"./NotesItem.vue?vue&type=template&id=59a6bdd0\"\nimport script from \"./NotesItem.vue?vue&type=script&lang=js\"\nexport * from \"./NotesItem.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue\\\\vueLesson5-11-1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./Notes.vue?vue&type=template&id=6c00b24e\"\nimport script from \"./Notes.vue?vue&type=script&lang=js\"\nexport * from \"./Notes.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue\\\\vueLesson5-11-1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"," <!-- Шаг № 30 Вёрстка и  Modal.vue -->\r\n<template>\r\n    <!-- Шаг № 37 Придать плавности при нажатии на \"Добавить заметку\r\n      Во вью есть встроенные компоненты, один из них transition \r\n      (Создать компонент transition в Modal.vue)\r\n       В него вставляем ту чать кода которую хотим анимировать\r\n     Используется с помощью v-if или v-show, но также можно и задать название нашей анимации\r\n                                                            -->\r\n    <Transition name=\"modal\">\r\n        <!-- Шаг № 33 При клике на пустое место(По .modal) закрытие окна в файле Modal.vue (Создать метод closeModal) -->\r\n        <div class=\"modal\" @click=\"closeModal\">\r\n\r\n            <!-- Шаг № 35 Чтобы событие closeModal не страбатывало на Блок с добавлением заметок нужно именно у блока сбрасывать это событие @click.stop -->\r\n            <div class=\"modal__block\" @click.stop=\"\">\r\n                <!-- Шаг №60 Изменить Заголовок модального окна \"Изменить/Добавить заметку\" -->\r\n                <h2 class=\"modal__block_title\">\r\n                    {{ edit ? 'Изменить заметку' : 'Добавить заметку' }}</h2>\r\n                <div class=\"modal__block_inputs\">\r\n                    <label>\r\n                        <span>Title</span>\r\n                        <input autofocus v-model=\"title\" type=\"text\">\r\n                    </label>\r\n                    <label>\r\n                        <span>Content</span>\r\n                        <textarea v-model=\"text\"></textarea>\r\n                    </label>\r\n                </div>\r\n                <div class=\"modal__block_btns\">\r\n                    <!-- 35.1 При клике на отмена, чтобы тоже срабатывал closeModal -->\r\n                    <!--  Чтобы при клике на Отмена тоже срабатывало событие closeModal -->\r\n                    <button @click=\"closeModal\" class=\"modal__block_btns-btn del\">Отмена</button>\r\n\r\n                    <!-- Шаг № 39 Реализация добавления заметок (Добавить click в modal__block_btns(Modal.vue) и при клике вызывать метод addNote) -->\r\n                    <button v-if=\"!edit\" class=\"modal__block_btns-btn edit\" @click=\"addNote\">Добавить</button>\r\n                <!-- Шаг №61 Изменить кнопку  \"Изменить/Добавить\" в Modal.vue\r\n                    Сделать через условие v-if/v-else\r\n                                        -->\r\n                    <button v-else class=\"modal__block_btns-btn edit\" @click=\"changeNote\">Изменить</button>\r\n                <!-- Шаг №66 Сделать так чтобы при клике Изменить Сама заметка изменялась:\r\n                1) В Modal.vue тегу кнопке \"изменить\" при клике выполнялся метод changeNote\r\n                2)Создать метод changeNote()\r\n                3) Добавить условие в метод\r\n                        -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </Transition>\r\n</template>\r\n\r\n<script>\r\n//  Шаг № 47 после установки импортируем uuid в Modal.vue\r\n//  С помощью сайта npmjs.com находим uuid там будет импорт\r\n//         (Далее в addNote создаём ключ id:uuid4() ) \r\n// После показать id через консоль vue в браузере\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport default {\r\n\r\n    //     Шаг № 59 Передать через props :edit в Modal.vue сам edit.\r\n    //   Далее получить этот props в файле Modal.vue\r\n    props: {\r\n        edit: {\r\n            typeof: Boolean,\r\n        },\r\n        editedNote: {\r\n            typeof: Object\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            //    Шаг № 36 Сделать v-model Title и text с input и textArea\r\n            title: '',\r\n            text: ''\r\n        }\r\n    },\r\n    // 33.2 Создать closeModal в Modal.vue\r\n    methods: {\r\n        closeModal() {\r\n            //    Шаг № 34 Через функцию $emit передаём метод closeModal из Modal.vue в App.vue\r\n            this.$emit('close')\r\n            /* Чтобы после закрытия модалки поля очищались */\r\n            this.title = this.text = ''\r\n        },\r\n\r\n        /*  Шаг №66 Сделать так чтобы при клике Изменить Сама заметка изменялась:\r\n             1) В Modal.vue тегу кнопке \"изменить\" при клике выполнялся метод changeNote\r\n             2)Создать метод changeNote()\r\n             3) Добавить условие в метод \r\n             4)Создаём новый обьект в изменнённой заметкой (Но берём id той заметки которую мы передали через props editedNote.id. Чтобы Id не изменялся)\r\n             5) Передать изменённую заметку родителю через $emit() после вызываем closeModal()\r\n             */\r\n             \r\n        changeNote() {\r\n            if (this.text.length > 2 && this.title.length > 2) {\r\n                const newEditedNote = {\r\n                    id: this.editedNote.id,\r\n                    title: this.title,\r\n                    text: this.text,\r\n                    date: new Date().toLocaleDateString()\r\n                }\r\n                this.$emit('changedNote', newEditedNote)\r\n                this.closeModal()\r\n            }\r\n        },\r\n        addNote() {\r\n            //  Шаг № 44 Добавить условие в метод addNote в файле Modal.vue\r\n            if (this.title != '' && this.text != '') {\r\n                // Шаг № 40 Создать и описать метод addNote в Modal.vue (Который создаёт заметки)\r\n                const note = {\r\n                    id: uuidv4(),\r\n                    title: this.title,\r\n                    text: this.text,\r\n                    /* Чтобы получить данные даты в виде 01.01.2023 */\r\n                    date: new Date().toLocaleDateString()\r\n                }\r\n                /* Шаг № 41 С помощью функции emit создать событие addNote и передать туда обьект note */\r\n                this.$emit('addNote', note)\r\n                this.closeModal()\r\n                //   Шаг № 43 Сделать так чтобы после того как добавиться заметка очищались поля ввода и закрывалась модальное окно (В Modal.vue После this.$emit вызвать closeModal())  \r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n","import { render } from \"./Modal.vue?vue&type=template&id=3c68c044\"\nimport script from \"./Modal.vue?vue&type=script&lang=js\"\nexport * from \"./Modal.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue\\\\vueLesson5-11-1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=187de743\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\vue\\\\vueLesson5-11-1\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/* Импортируем заметки с файлов Json */\r\nimport ru from './ru.json'\r\nimport eng from './eng.json'\r\n\r\n/* Экспортируем Обьект languages с ключами ru, eng в main.js */\r\nexport const languages = {\r\n    ru,\r\n    eng\r\n}","import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport '@/assets/styles/main.scss'\n\n/* Импортируем languages С index.js */\nimport { languages } from '@/i18n';\n\n/* Импортируем функцию с инструмента vue-i18n */\nimport { createI18n } from 'vue-i18n';\n\n/* Создаём переменную где будем хранить информацию с LocaleStorage с ключа lang */\nconst localeStorageLang = localStorage.lang;\n\n/* Создаём экспрейшн функцию в которую передаём обьект с настройками  */\nconst i18n = createI18n(\n    {\n        legacy: true,\n        /* В ключ ниже передаётся значени с переменной если там ничего нет, то по умолчанию будет русский язык */\n        locale: localeStorageLang || 'ru',\n        /* В этот ключ передаём наш обьект languages */\n        messages: languages\n    }\n)\n\n/* Говорим, чтобы при созданиий приложения он брал информацию с i18n */\ncreateApp(App).use(i18n).mount('#app') \n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/todolist/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkvue3\"] = self[\"webpackChunkvue3\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(3308); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["class","_createElementVNode","src","_imports_0","alt","_hoisted_2","_createElementBlock","_hoisted_1","type","$data","_createVNode","_component_Navbar","onSetSearch","$event","_component_Notes","notes","$options","onDelNote","onChange","_component_Modal","onClose","onAddNote","edit","editedNote","onChangedNote","onClick","_hoisted_4","_imports_1","_hoisted_7","_imports_2","_hoisted_10","_ctx","locale","_hoisted_3","_hoisted_6","autofocus","placeholder","data","nav","search","methods","switchLang","this","$i18n","localStorage","lang","watch","newValue","$emit","__exports__","$props","length","_hoisted_5","active","_Fragment","note","_createBlock","_component_NotesItem","key","id","view","_hoisted_9","between","title","date","text","props","typeof","Object","Boolean","Array","components","NotesItem","_Transition","name","closeModal","changeNote","newEditedNote","Date","toLocaleDateString","addNote","uuidv4","Navbar","Notes","Modal","isModalOpen","searchValue","word","push","delNote","splice","getNotes","localNotes","JSON","parse","change","currentNote","find","console","log","changedNote","newNote","forEach","computed","filterNotes","filter","toLowerCase","includes","mounted","close","handler","stringify","deep","render","languages","ru","eng","localeStorageLang","i18n","createI18n","legacy","messages","createApp","App","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}